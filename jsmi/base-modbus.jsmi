{
	"imports": ["base"],
	"name": {
		"id": 2,
		"key": "base-modbus"
	},
	"refer": [
		"https://embarcados.com.br/protocolo-modbus/"
	],
	"glossary": {
		"node": "Id of node modbus",
		"fc": "Function Code",
		"CRC": "Cyclical Redundancy Checking"
	},
	"modbus": {
		"definition": {
			"node": {
				"broadcast": {
					"description": "Every slaves receiave only but don`t response",
					"type": "int1",
					"range": [0]
				},
				"work": {
					"description": "Slave address",
					"type": "int1",
					"range": [1, 247]
				},
				"reserved": {
					"description": "Reserved address",
					"type": "int1",
					"range": [248, 255]
				}
			},
			"address": {
				"coils": {
					"id": 1,
					"name": "coils",
					"description": "Coils Status",
					"address": [1, 9999],
					"add_hex": ["0000", "270E"],
					"permition": "rw",
					"type": "digital",
					"unit": "bits",
					"len": 1
				},
				"discret_inputs": {
					"id": 2,
					"name": "discret_inputs",
					"description": "Discret Inputs Status",
					"address": [10001, 1999],
					"add_hex": ["0000", "270E"],
					"permition": "ro",
					"type": "digital",
					"unit": "bits",
					"len": 1
				},
				"holding_register": {
					"id": 3,
					"name": "holding_register",
					"description": "Holding Register",
					"address": [40001, 49999],
					"add_hex": ["0000", "270E"],
					"permition": "rw",
					"type": "analogic",
					"unit": "bits",
					"len": 16
				},
				"input_register": {
					"id": 4,
					"name": "input_register",
					"description": "Input Register",
					"address": [30001, 39999],
					"add_hex": ["0000", "270E"],
					"permition": "ro",
					"type": "analogic",
					"unit": "bits",
					"len": 16
				}
			},
			"fc": {
				"1": {
					"decription": {
						"en_us": "Read coil-type bit block(discrete output).",
						"pt-br": "Leitura de bloco de bits do tipo coil(saída discreta)."
					},
					"hex": "01",
					"action": "read",
					"refer": "address.coils"
				},
				"2": {
					"decription": {
						"en_us": "Read block of discrete inputs type bits.",
						"pt-br": "Leitura de bloco de bits do tipo entradas discretas."
					},
					"hex": "02",
					"action": "read",
					"refer": "address.discret_inputs"
				},
				"3": {
					"decription": {
						"en_us": "Reading block of holding type registers.",
						"pt-br": "Leitura de bloco de registradores do tipo holding."
					},
					"hex": "03",
					"action": "read",
					"refer": "address.holding_register"
				},
				"4": {
					"decription": {
						"en_us": "Input-type register block reading.",
						"pt-br": "Leitura de bloco de registradores do tipo input."
					},
					"hex": "04",
					"action": "read",
					"refer": "address.input_register"
				},
				"5": {
					"decription": {
						"en_us": "Write to a single coil bit (discrete output).",
						"pt-br": "Escrita em um único bit do tipo coil(saída discreta)."
					},
					"hex": "05",
					"action": "write",
					"multiples": false,
					"refer": "address.coils"
				},
				"6": {
					"decription": {
						"en_us": "Writing to a single holding register.",
						"pt-br": "Escrita em um único registrador do tipo holding."
					},
					"hex": "06",
					"action": "write",
					"multiples": false,
					"refer": "address.holding_register"
				},
				"7": {
					"decription": {
						"en_us": "Read the contents of 8 exception states.",
						"pt-br": "Ler o conteúdo de 8 estados de exceção."
					},
					"hex": "07"
				},
				"8": {
					"decription": {
						"en_us": "Provide a series of tests to verify communication and internal errors.",
						"pt-br": "Prover uma série de testes para verificação da comunicação e erro internos."
					},
					"hex": "08"
				},
				"11": {
					"decription": {
						"en_us": "Modbus: Get the event counter.",
						"pt-br": "Modbus: Obter o contador de eventos."
					},
					"hex": "0B"
				},
				"12": {
					"decription": {
						"en_us": "Modbus: Get an event report.",
						"pt-br": "Modbus: Obter um relatório de eventos."
					},
					"hex": "0C"
				},
				"15": {
					"decription": {
						"en_us": "Write in bit block of coil type (discrete output).",
						"pt-br": "Escrita em bloco de bits do tipo coil(saída discreta)."
					},
					"hex": "0F",
					"action": "write",
					"multiples": true,
					"refer": "address.coils"
				},
				"16": {
					"decription": {
						"en_us": "Block writing of holding type registers.",
						"pt-br": "Escrita em bloco de registradores do tipo holding."
					},
					"hex": "10",
					"action": "write",
					"multiples": true,
					"refer": "address.holding_register"
				},
				"17": {
					"decription": {
						"en_us": "Read some device information.",
						"pt-br": "Ler algumas informações do dispositivo."
					},
					"hex": "11"
				},
				"20": {
					"decription": {
						"en_us": "Read information from a file.",
						"pt-br": "Ler informações de um arquivo."
					},
					"hex": "14"
				},
				"21": {
					"decription": {
						"en_us": "Write information to a file.",
						"pt-br": "Escrever informações em um arquivo."
					},
					"hex": "15"
				},
				"22": {
					"decription": {
						"en_us": "Modify the contents of wait registers through logical operations.",
						"pt-br": "Modificar o conteúdo de registradores de espera através de operações   lógicas."
					},
					"hex": "16"
				},
				"23": {
					"decription": {
						"en_us": "Combines reading and writing registers in a single transaction.",
						"pt-br": "Combina ler e escrever em registradores numa única transação."
					},
					"hex": "17"
				},
				"24": {
					"decription": {
						"en_us": "Read the contents of the FIFO queue of registers.",
						"pt-br": "Ler o conteúdo da fila FIFO de registradores."
					},
					"hex": "18"
				},
				"43": {
					"decription": {
						"en_us": "Device Model Identification.",
						"pt-br": "Identificação do modelo do dispositivo."
					},
					"hex": "2B"
				}
			},
			"message": {
				"resquest": {
					"who": "master",
					"direction": "push",
					"frame": [{
							"name": "node",
							"bytes": 1
						},
						{
							"name": "fc",
							"bytes": 1
						},
						{
							"name": "address",
							"bytes": 2,
							"description": "address of register"
						},
						{
							"name": "quantity",
							"bytes": 2,
							"description": "quantity of register"
						},
						{
							"name": "crc",
							"bytes": 2
						}
					]
				},
				"response": {
					"who": "slave",
					"direction": "pull",
					"frame": [{
							"name": "node",
							"bytes": 1
						},
						{
							"name": "fc",
							"bytes": 1
						},
						{
							"name": "bytes",
							"bytes": 1
						},
						{
							"name": "regiter",
							"bytes": "function(bytes){return bytes;}"
						},
						{
							"name": "crc",
							"bytes": 2
						}
					]
				}
			},
			"interfaces": {
				"RS232": {
					"slaves": 1,
					"len": 15,
					"unit": "meters"
				},
				"RS485": {
					"slaves": 32,
					"len": 1200,
					"unit": "meters"
				},
				"RS422": {
					"slaves": 32,
					"len": 1200,
					"unit": "meters"
				}
			},
			"modes": {
				"RTU": {
					"description": "Remote Terminal Unit",
					"interface": {
						"type": "serial",
						"baudrate": [300, 9600, 19200, 100000],
						"bit": 8,
						"stop_bit": 1,
						"check_bit": false
					},
					"unit": "bit",
					"data": [{
							"len": 8,
							"refer": "node",
							"description": "Address"
						}, {
							"len": 8,
							"refer": "fn",
							"description": "Function"
						}, {
							"len": "function (n) { return n * 8; }",
							"refer": "data",
							"description": "Data"
						},
						{
							"len": 16,
							"description": "CRC Check"
						}
					]
				},
				"ASCII": {
					"interval": {
						"value": 1,
						"unit": "s"
					},
					"interface": {
						"type": "serial",
						"baudrate": [300, 9600, 19200, 100000],
						"bit": 8,
						"stop_bit": 1,
						"check_bit": false
					},
					"code": "Hexa",
					"er_code": "[0-9A-F]",
					"unit": "char",
					"data": [{
							"len": 1,
							"value": ":",
							"description": "Start"
						}, {
							"len": 2,
							"refer": "node",
							"description": "Address"
						}, {
							"len": 1,
							"refer": "fn",
							"description": "Function"
						}, {
							"len": "function (n) { return n * 8; }",
							"refer": "data",
							"description": "Data"
						},
						{
							"len": 2,
							"unit": "char",
							"description": "LRC Check"
						},
						{
							"len": 2,
							"unit": "char",
							"value": "\r\n",
							"description": "End"
						}
					],
					"bit_per_byte": [{
						"len": 1,
						"description": "Begin"
					}, {
						"len": 7,
						"description": "Data. Least significant bit first",
						"pt_br": "Dados. bit menos significativo primeiro"
					}, {
						"len": 1,
						"description": "even/odd parity, or no parity bit",
						"pt_br": "paridade par / ímpar,  ou sem bit de paridade"
					}, {
						"len": 1,
						"description": "stop, if parity is used; 2 bits if no parity",
						"pt_br": "parada, se a paridade é usado; 2 bits se sem paridade"
					}, {
						"len": 16,
						"description": "Error check : Longitudinal Redundancy Check (LRC)",
						"pt_br": "Erro check : Longitudinal Redundancy Check (LRC)"
					}]
				},
				"TCP/IP": {
					"unit": "bytes",
					"default_port": 502,
					"request": {
						"data_encapsulated": "Like RTU",
						"data": [{
							"len": 7,
							"description": "MBAP - Modbus Application Header",
							"data": [{
								"len": 2,
								"description": "Transaction identifier: usado para identificação da resposta para a transação"
							}, {
								"len": 2,
								"description": "Protocol identifier: 0 (zero) indica Modbus"
							}, {
								"len": 2,
								"description": "Length: contagem de todos os próximos bytes"
							}, {
								"len": 1,
								"refer": "node",
								"description": "Unit identifier: utilizado para identificar o escravo remoto em uma rede Modbus RTU"
							}],
							"obs": "Modbus TCP não acrescenta ao quadro um campo de checagem de erros, entretanto o frame ethernet já utiliza CRC-32 tornando desnecessário outro campo de checagem. O cliente Modbus TCP deve iniciar uma conexão TCP com o servidor a fim de enviar as requisições. A porta TCP 502 é a porta padrão para conexão com servidores Modbus TCP."
						}, {
							"len": 1,
							"refer": "fn",
							"description": "Function code"
						}, {
							"len": "function (n) { return n; }",
							"refer": "data",
							"description": "Data"
						}]
					},
					"response": {}
				}
			}
		}
	}
}